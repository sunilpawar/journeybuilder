<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.skvare.journeybuilder/xml/schema/CRM/Journeybuilder/JourneyEmailTemplate.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:c82ea7c61ca88fdc5b781847e13de4aa)
 */
use CRM_Journeybuilder_ExtensionUtil as E;

/**
 * Database access object for the JourneyEmailTemplate entity.
 */
class CRM_Journeybuilder_DAO_JourneyEmailTemplate extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_journey_email_templates';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique JourneyEmailTemplate ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Steps
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $step_id;

  /**
   * Mosaico template ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $mosaico_template_id;

  /**
   * @var string
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $subject;

  /**
   * Html Content.
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $html_content;

  /**
   * text content.
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $text_content;

  /**
   * personalization rules.
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $personalization_rules;

  /**
   * ab test config.
   *
   * @var string|null
   *   (SQL type: longtext)
   *   Note that values will be retrieved from the database as a string.
   */
  public $ab_test_config;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_journey_email_templates';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Journey Email Templates') : E::ts('Journey Email Template');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique JourneyEmailTemplate ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_journey_email_templates.id',
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'step_id' => [
          'name' => 'step_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Step'),
          'description' => E::ts('FK to Steps'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_journey_email_templates.step_id',
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'FKClassName' => 'CRM_Journeybuilder_DAO_JourneyStep',
          'add' => NULL,
        ],
        'mosaico_template_id' => [
          'name' => 'mosaico_template_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Mosaico template'),
          'description' => E::ts('Mosaico template ID'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_journey_email_templates.mosaico_template_id',
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'add' => NULL,
        ],
        'subject' => [
          'name' => 'subject',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Subject'),
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_journey_email_templates.subject',
          'export' => TRUE,
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '1.0',
        ],
        'html_content' => [
          'name' => 'html_content',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Html Content'),
          'description' => E::ts('Html Content.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_journey_email_templates.html_content',
          'export' => TRUE,
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'text_content' => [
          'name' => 'text_content',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Text Content'),
          'description' => E::ts('text content.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_journey_email_templates.text_content',
          'export' => TRUE,
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'personalization_rules' => [
          'name' => 'personalization_rules',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('Personalization Rules'),
          'description' => E::ts('personalization rules.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_journey_email_templates.personalization_rules',
          'export' => TRUE,
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
        'ab_test_config' => [
          'name' => 'ab_test_config',
          'type' => CRM_Utils_Type::T_LONGTEXT,
          'title' => E::ts('AB Test Config'),
          'description' => E::ts('ab test config.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_journey_email_templates.ab_test_config',
          'export' => TRUE,
          'table_name' => 'civicrm_journey_email_templates',
          'entity' => 'JourneyEmailTemplate',
          'bao' => 'CRM_Journeybuilder_DAO_JourneyEmailTemplate',
          'localizable' => 0,
          'html' => [
            'type' => 'TextArea',
          ],
          'add' => '1.0',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'journey_email_templates', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'journey_email_templates', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
