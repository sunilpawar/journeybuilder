/**
 * D3.js Library (Minimal Build for Journey Builder)
 * This is a minimal implementation for basic SVG and data visualization needs
 * For production use, include the full d3.min.js from https://d3js.org/
 */

(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.d3 = {}));
}(this, function(exports) {
  'use strict';

  // Selection functionality
  function selection(selector) {
    if (typeof selector === 'string') {
      return document.querySelectorAll(selector);
    }
    return selector;
  }

  function select(selector) {
    return document.querySelector(selector);
  }

  function selectAll(selector) {
    return Array.from(document.querySelectorAll(selector));
  }

  // SVG creation and manipulation
  function create(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
  }

  // Scale functions
  function scaleLinear() {
    var domain = [0, 1];
    var range = [0, 1];

    function scale(x) {
      var t = (x - domain[0]) / (domain[1] - domain[0]);
      return range[0] + t * (range[1] - range[0]);
    }

    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };

    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };

    return scale;
  }

  function scaleBand() {
    var domain = [];
    var range = [0, 1];
    var bandwidth = 0;
    var padding = 0;

    function scale(x) {
      var index = domain.indexOf(x);
      if (index === -1) return undefined;
      return range[0] + index * bandwidth;
    }

    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      bandwidth = (range[1] - range[0]) / domain.length;
      return scale;
    };

    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      bandwidth = (range[1] - range[0]) / domain.length;
      return scale;
    };

    scale.bandwidth = function() {
      return bandwidth;
    };

    return scale;
  }

  // Axis functions
  function axisBottom(scale) {
    function axis(context) {
      var g = context.append('g').attr('class', 'axis axis-bottom');
      
      // Add axis line
      g.append('line')
        .attr('x1', scale.range()[0])
        .attr('x2', scale.range()[1])
        .attr('stroke', '#000');

      // Add ticks
      var ticks = scale.domain();
      ticks.forEach(function(tick) {
        var x = scale(tick);
        g.append('line')
          .attr('x1', x)
          .attr('x2', x)
          .attr('y1', 0)
          .attr('y2', 6)
          .attr('stroke', '#000');

        g.append('text')
          .attr('x', x)
          .attr('y', 15)
          .attr('text-anchor', 'middle')
          .text(tick);
      });

      return g;
    }
    return axis;
  }

  function axisLeft(scale) {
    function axis(context) {
      var g = context.append('g').attr('class', 'axis axis-left');
      
      // Add axis line
      g.append('line')
        .attr('y1', scale.range()[0])
        .attr('y2', scale.range()[1])
        .attr('stroke', '#000');

      // Add ticks
      var ticks = scale.domain();
      ticks.forEach(function(tick) {
        var y = scale(tick);
        g.append('line')
          .attr('x1', -6)
          .attr('x2', 0)
          .attr('y1', y)
          .attr('y2', y)
          .attr('stroke', '#000');

        g.append('text')
          .attr('x', -10)
          .attr('y', y)
          .attr('text-anchor', 'end')
          .attr('alignment-baseline', 'middle')
          .text(tick);
      });

      return g;
    }
    return axis;
  }

  // Color scales
  function schemeCategory10() {
    return [
      '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',
      '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'
    ];
  }

  // Array utilities
  function max(array, accessor) {
    if (accessor) {
      return Math.max.apply(Math, array.map(accessor));
    }
    return Math.max.apply(Math, array);
  }

  function min(array, accessor) {
    if (accessor) {
      return Math.min.apply(Math, array.map(accessor));
    }
    return Math.min.apply(Math, array);
  }

  function extent(array, accessor) {
    return [min(array, accessor), max(array, accessor)];
  }

  // D3 selection prototype extensions
  function d3Selection(elements) {
    this.elements = elements;
    return this;
  }

  d3Selection.prototype.append = function(tagName) {
    var newElements = [];
    this.elements.forEach(function(el) {
      var newEl;
      if (tagName === 'svg' || el.tagName === 'svg' || el.tagName === 'g') {
        newEl = document.createElementNS('http://www.w3.org/2000/svg', tagName);
      } else {
        newEl = document.createElement(tagName);
      }
      el.appendChild(newEl);
      newElements.push(newEl);
    });
    return new d3Selection(newElements);
  };

  d3Selection.prototype.attr = function(name, value) {
    if (arguments.length === 1) {
      return this.elements[0] ? this.elements[0].getAttribute(name) : null;
    }
    this.elements.forEach(function(el) {
      el.setAttribute(name, value);
    });
    return this;
  };

  d3Selection.prototype.style = function(name, value) {
    if (arguments.length === 1) {
      return this.elements[0] ? getComputedStyle(this.elements[0])[name] : null;
    }
    this.elements.forEach(function(el) {
      el.style[name] = value;
    });
    return this;
  };

  d3Selection.prototype.text = function(value) {
    if (!arguments.length) {
      return this.elements[0] ? this.elements[0].textContent : null;
    }
    this.elements.forEach(function(el) {
      el.textContent = value;
    });
    return this;
  };

  d3Selection.prototype.data = function(data) {
    this._data = data;
    return this;
  };

  d3Selection.prototype.enter = function() {
    return this;
  };

  d3Selection.prototype.exit = function() {
    return this;
  };

  d3Selection.prototype.remove = function() {
    this.elements.forEach(function(el) {
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
    });
    return this;
  };

  // Enhanced select function that returns d3Selection
  function d3Select(selector) {
    var element = typeof selector === 'string' ? 
      document.querySelector(selector) : selector;
    return new d3Selection(element ? [element] : []);
  }

  function d3SelectAll(selector) {
    var elements = typeof selector === 'string' ? 
      Array.from(document.querySelectorAll(selector)) : selector;
    return new d3Selection(elements || []);
  }

  // Shape generators
  function line() {
    var x = function(d) { return d[0]; };
    var y = function(d) { return d[1]; };

    function lineGenerator(data) {
      return 'M' + data.map(function(d) {
        return x(d) + ',' + y(d);
      }).join('L');
    }

    lineGenerator.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return lineGenerator;
    };

    lineGenerator.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return lineGenerator;
    };

    return lineGenerator;
  }

  function arc() {
    var innerRadius = 0;
    var outerRadius = 100;
    var startAngle = 0;
    var endAngle = Math.PI * 2;

    function arcGenerator() {
      var r0 = innerRadius;
      var r1 = outerRadius;
      var a0 = startAngle;
      var a1 = endAngle;

      var x0 = Math.cos(a0);
      var y0 = Math.sin(a0);
      var x1 = Math.cos(a1);
      var y1 = Math.sin(a1);

      return [
        'M', r1 * x0, ',', r1 * y0,
        'A', r1, ',', r1, ' 0 ', (a1 - a0 > Math.PI ? 1 : 0), ',1 ', r1 * x1, ',', r1 * y1,
        'L', r0 * x1, ',', r0 * y1,
        'A', r0, ',', r0, ' 0 ', (a1 - a0 > Math.PI ? 1 : 0), ',0 ', r0 * x0, ',', r0 * y0,
        'Z'
      ].join('');
    }

    arcGenerator.innerRadius = function(_) {
      if (!arguments.length) return innerRadius;
      innerRadius = _;
      return arcGenerator;
    };

    arcGenerator.outerRadius = function(_) {
      if (!arguments.length) return outerRadius;
      outerRadius = _;
      return arcGenerator;
    };

    arcGenerator.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return arcGenerator;
    };

    arcGenerator.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return arcGenerator;
    };

    return arcGenerator;
  }

  // Pie layout
  function pie() {
    var value = function(d) { return d; };
    var sort = null;
    var startAngle = 0;
    var endAngle = 2 * Math.PI;

    function pieGenerator(data) {
      var sum = data.reduce(function(total, d) {
        return total + value(d);
      }, 0);

      var angle = startAngle;
      var k = (endAngle - startAngle) / sum;

      return data.map(function(d) {
        var v = value(d);
        var a0 = angle;
        var a1 = angle += v * k;
        return {
          data: d,
          value: v,
          startAngle: a0,
          endAngle: a1
        };
      });
    }

    pieGenerator.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pieGenerator;
    };

    return pieGenerator;
  }

  // Event handling
  function event() {
    return window.event || d3.event;
  }

  // Mouse position
  function mouse(container) {
    var e = event();
    var rect = container.getBoundingClientRect();
    return [e.clientX - rect.left, e.clientY - rect.top];
  }

  // CSV parsing (basic)
  function csv(url, callback) {
    fetch(url)
      .then(function(response) { return response.text(); })
      .then(function(text) {
        var lines = text.split('\n');
        var headers = lines[0].split(',');
        var data = lines.slice(1).map(function(line) {
          var values = line.split(',');
          var obj = {};
          headers.forEach(function(header, i) {
            obj[header.trim()] = values[i] ? values[i].trim() : '';
          });
          return obj;
        });
        if (callback) callback(data);
      })
      .catch(function(error) {
        console.error('Error loading CSV:', error);
        if (callback) callback(null, error);
      });
  }

  // Export all functions
  exports.select = d3Select;
  exports.selectAll = d3SelectAll;
  exports.selection = selection;
  exports.create = create;
  exports.scaleLinear = scaleLinear;
  exports.scaleBand = scaleBand;
  exports.axisBottom = axisBottom;
  exports.axisLeft = axisLeft;
  exports.schemeCategory10 = schemeCategory10;
  exports.max = max;
  exports.min = min;
  exports.extent = extent;
  exports.line = line;
  exports.arc = arc;
  exports.pie = pie;
  exports.event = event;
  exports.mouse = mouse;
  exports.csv = csv;

  // Version
  exports.version = '7.8.5-minimal';

  Object.defineProperty(exports, '__esModule', {value: true});

}));